<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:dita-ot="http://dita-ot.sourceforge.net/ns/201007/dita-ot" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" xmlns:e="pdf-theme" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:fox="http://xmlgraphics.apache.org/fop/extensions" xmlns:opentopic-func="http://www.idiominc.com/opentopic/exsl/function" xmlns:opentopic="http://www.idiominc.com/opentopic" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" exclude-result-prefixes="xs e dita-ot ditaarch opentopic opentopic-func"><xsl:template name="getChapterPrefix"><xsl:variable name="topicref" as="element()*" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)"/><xsl:variable name="chapter" as="element()*" select="$topicref/ancestor-or-self::*[contains(@class, ' map/topicref ')]                                                             [not(contains(@class, ' bookmap/part ')) and                                                              not(contains(@class, ' bookmap/appendices ')) and                                                              not(contains(@class, ' bookmap/backmatter '))]                                                             [parent::opentopic:map or                                                              parent::*[contains(@class, ' bookmap/part ')] or                                                              parent::*[contains(@class, ' bookmap/appendices ')]]"/><xsl:variable name="number" as="node()*"><xsl:apply-templates select="$chapter[1]" mode="e:chapter-number"/></xsl:variable><xsl:if test="exists($number)"><xsl:copy-of select="$number"/><xsl:text>–</xsl:text></xsl:if></xsl:template><xsl:template match="*" mode="insertChapterFirstpageStaticContent"><xsl:param name="type" as="xs:string"/><xsl:choose><xsl:when test="$type = 'chapter'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Chapter with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:apply-templates select="key('map-id', @id)[1]" mode="topicTitleNumber"/></number></xsl:with-param></xsl:call-template></xsl:when><xsl:when test="$type = 'appendix'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Appendix with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:apply-templates select="key('map-id', @id)[1]" mode="topicTitleNumber"/></number></xsl:with-param></xsl:call-template></xsl:when><xsl:when test="$type = 'appendices'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Appendix with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:text> </xsl:text></number></xsl:with-param></xsl:call-template></xsl:when><xsl:when test="$type = 'part'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Part with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:apply-templates select="key('map-id', @id)[1]" mode="topicTitleNumber"/></number></xsl:with-param></xsl:call-template></xsl:when><xsl:when test="$type = 'preface'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Preface title'"/></xsl:call-template></xsl:when><xsl:when test="$type = 'notices'"><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Notices title'"/></xsl:call-template></xsl:when></xsl:choose></xsl:template><xsl:template name="processTopicNotices"><xsl:variable name="atts" as="element()"><xsl:choose><xsl:when test="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)/ancestor::*[contains(@class,' bookmap/backmatter ')]"><dummy xsl:use-attribute-sets="page-sequence.backmatter.notice"/></xsl:when><xsl:otherwise><dummy xsl:use-attribute-sets="page-sequence.notice"/></xsl:otherwise></xsl:choose></xsl:variable><fo:page-sequence master-reference="body-sequence"><xsl:copy-of select="$atts/@*"/><xsl:call-template name="startPageNumbering"/><xsl:call-template name="insertPrefaceStaticContents"/><fo:flow flow-name="xsl-region-body"><fo:block xsl:use-attribute-sets="topic"><xsl:call-template name="commonattributes"/><xsl:if test="empty(ancestor::*[contains(@class, ' topic/topic ')])"><fo:marker marker-class-name="current-topic-number"><xsl:variable name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)[1]" as="element()?"/><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><xsl:apply-templates select="." mode="insertTopicHeaderMarker"/></xsl:if><xsl:apply-templates select="." mode="customTopicMarker"/><xsl:apply-templates select="*[contains(@class,' topic/prolog ')]"/><fo:block xsl:use-attribute-sets="topic.title"><xsl:apply-templates select="." mode="customTopicAnchor"/><xsl:call-template name="pullPrologIndexTerms"/><xsl:apply-templates select="*[contains(@class,' ditaot-d/ditaval-startprop ')]"/><xsl:for-each select="*[contains(@class,' topic/title ')]"><xsl:apply-templates select="." mode="getTitle"/></xsl:for-each></fo:block><xsl:apply-templates select="* except(*[contains(@class, ' topic/title ') or                                                            contains(@class,' ditaot-d/ditaval-startprop ') or                                                            contains(@class, ' topic/prolog ') or                                                            contains(@class, ' topic/topic ')])"/><xsl:apply-templates select="*[contains(@class,' topic/topic ')]"/><xsl:call-template name="pullPrologIndexTerms.end-range"/></fo:block></fo:flow></fo:page-sequence></xsl:template><xsl:template match="*" mode="processTopicPartInsideFlow"><fo:block xsl:use-attribute-sets="topic"><xsl:call-template name="commonattributes"/><xsl:if test="empty(ancestor::*[contains(@class, ' topic/topic ')])"><xsl:variable name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)[1]" as="element()?"/><fo:marker marker-class-name="current-topic-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-part-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-part-title"><xsl:apply-templates select="*[contains(@class, ' topic/title ')]/node()"/></fo:marker><xsl:apply-templates select="." mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-part'"/></xsl:apply-templates><fo:marker marker-class-name="current-header"/></xsl:if><xsl:apply-templates select="." mode="customTopicMarker"/><xsl:apply-templates select="*[contains(@class,' topic/prolog ')]"/><fo:block xsl:use-attribute-sets="part.title"><xsl:attribute name="id"><xsl:call-template name="generate-toc-id"/></xsl:attribute><xsl:call-template name="pullPrologIndexTerms"/><xsl:apply-templates select="*[contains(@class,' ditaot-d/ditaval-startprop ')]"/><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Part with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:sequence select="e:get-title-number(.)"/></number></xsl:with-param></xsl:call-template><xsl:text> </xsl:text><xsl:apply-templates select="*[contains(@class,' topic/title ')]/node()"/></fo:block><xsl:if test="*[contains(@class,' topic/shortdesc ') or                            contains(@class, ' topic/abstract ')]/node()"><fo:block xsl:use-attribute-sets="topic__shortdesc"><xsl:apply-templates select="*[contains(@class,' topic/shortdesc ') or                                               contains(@class, ' topic/abstract ')]/node()"/></fo:block></xsl:if><xsl:apply-templates select="*[contains(@class,' topic/body ')]"/><xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-endprop ')]"/><xsl:if test="*[contains(@class,' topic/related-links ')]//                            *[contains(@class,' topic/link ')]                             [not(@role) or @role != 'child']"><xsl:apply-templates select="*[contains(@class,' topic/related-links ')]"/></xsl:if><xsl:choose><xsl:when test="$partLayout = 'BASIC'"/><xsl:when test="exists(*[contains(@class, ' topic/topic ')])"><fo:block xsl:use-attribute-sets="e:part_toc"><xsl:apply-templates select="*[contains(@class, ' topic/topic ')]" mode="part-toc"/></fo:block></xsl:when></xsl:choose><xsl:for-each select="*[contains(@class,' topic/topic ')]"><xsl:variable name="topicType" as="xs:string"><xsl:call-template name="determineTopicType"/></xsl:variable><xsl:if test="$topicType = 'topicSimple'"><xsl:apply-templates select="."/></xsl:if></xsl:for-each><xsl:call-template name="pullPrologIndexTerms.end-range"/></fo:block></xsl:template><xsl:template match="*" mode="processTopicAppendixInsideFlow"><fo:block xsl:use-attribute-sets="topic"><xsl:call-template name="commonattributes"/><xsl:variable name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)[1]" as="element()?"/><fo:marker marker-class-name="current-topic-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-appendix-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-appendix-title"><xsl:apply-templates select="*[contains(@class, ' topic/title ')]/node()"/></fo:marker><xsl:apply-templates select="." mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-appendix'"/></xsl:apply-templates><fo:marker marker-class-name="current-header"/><xsl:apply-templates select="." mode="customTopicMarker"/><xsl:apply-templates select="*[contains(@class,' topic/prolog ')]"/><fo:block xsl:use-attribute-sets="appendix.title"><xsl:attribute name="id"><xsl:call-template name="generate-toc-id"/></xsl:attribute><xsl:call-template name="pullPrologIndexTerms"/><xsl:apply-templates select="*[contains(@class,' ditaot-d/ditaval-startprop ')]"/><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Appendix with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:sequence select="e:get-title-number(.)"/></number></xsl:with-param></xsl:call-template><xsl:text> </xsl:text><xsl:apply-templates select="*[contains(@class,' topic/title ')]/node()"/></fo:block><xsl:if test="*[contains(@class,' topic/shortdesc ') or                            contains(@class, ' topic/abstract ')]/node()"><fo:block xsl:use-attribute-sets="topic__shortdesc"><xsl:apply-templates select="*[contains(@class,' topic/shortdesc ') or                                               contains(@class, ' topic/abstract ')]/node()"/></fo:block></xsl:if><xsl:apply-templates select="*[contains(@class,' topic/body ')]"/><xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-endprop ')]"/><xsl:if test="*[contains(@class,' topic/related-links ')]//                            *[contains(@class,' topic/link ')]                             [not(@role) or @role != 'child']"><xsl:apply-templates select="*[contains(@class,' topic/related-links ')]"/></xsl:if><xsl:choose><xsl:when test="$appendixLayout = 'BASIC'"/><xsl:when test="exists(*[contains(@class, ' topic/topic ')])"><fo:block xsl:use-attribute-sets="e:appendix_toc"><xsl:apply-templates select="*[contains(@class, ' topic/topic ')]" mode="appendix-toc"/></fo:block></xsl:when></xsl:choose><xsl:apply-templates select="*[contains(@class,' topic/topic ')]"/><xsl:call-template name="pullPrologIndexTerms.end-range"/></fo:block></xsl:template><xsl:template match="*" mode="processTopicChapterInsideFlow"><fo:block xsl:use-attribute-sets="topic"><xsl:call-template name="commonattributes"/><xsl:variable name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')][1]/@id)[1]" as="element()?"/><fo:marker marker-class-name="current-topic-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-chapter-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-chapter-title"><xsl:apply-templates select="*[contains(@class, ' topic/title ')]/node()"/></fo:marker><xsl:apply-templates select="." mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-chapter'"/></xsl:apply-templates><xsl:apply-templates select="." mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-header'"/></xsl:apply-templates><xsl:variable name="part" select="$topicref/ancestor-or-self::*[contains(@class, ' bookmap/part ')]" as="element()?"/><xsl:if test="exists($part)"><xsl:variable name="part-topic" select="key('topic-id', $part/@id)" as="element()?"/><fo:marker marker-class-name="current-part-number"><xsl:apply-templates select="$part" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-part-title"><xsl:apply-templates select="$part-topic/*[contains(@class, ' topic/title ')]/node()"/></fo:marker><xsl:apply-templates select="$part-topic" mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-part'"/></xsl:apply-templates></xsl:if><xsl:apply-templates select="." mode="customTopicMarker"/><xsl:apply-templates select="*[contains(@class,' topic/prolog ')]"/><fo:block xsl:use-attribute-sets="chapter.title"><xsl:attribute name="id"><xsl:call-template name="generate-toc-id"/></xsl:attribute><xsl:call-template name="pullPrologIndexTerms"/><xsl:apply-templates select="*[contains(@class,' ditaot-d/ditaval-startprop ')]"/><xsl:call-template name="getVariable"><xsl:with-param name="id" select="'Chapter with number'"/><xsl:with-param name="params" as="element()*"><number><xsl:sequence select="e:get-title-number(.)"/></number></xsl:with-param></xsl:call-template><xsl:text> </xsl:text><xsl:apply-templates select="*[contains(@class,' topic/title ')]/node()"/></fo:block><xsl:if test="*[contains(@class,' topic/shortdesc ') or                            contains(@class, ' topic/abstract ')]/node()"><fo:block xsl:use-attribute-sets="topic__shortdesc"><xsl:apply-templates select="*[contains(@class,' topic/shortdesc ') or                                               contains(@class, ' topic/abstract ')]/node()"/></fo:block></xsl:if><xsl:apply-templates select="*[contains(@class,' topic/body ')]"/><xsl:apply-templates select="*[contains(@class, ' ditaot-d/ditaval-endprop ')]"/><xsl:if test="*[contains(@class,' topic/related-links ')]//                            *[contains(@class,' topic/link ')]                             [not(@role) or @role != 'child']"><xsl:apply-templates select="*[contains(@class,' topic/related-links ')]"/></xsl:if><xsl:choose><xsl:when test="$chapterLayout = 'BASIC'"/><xsl:when test="exists(*[contains(@class, ' topic/topic ')])"><fo:block xsl:use-attribute-sets="e:chapter_toc"><xsl:apply-templates select="*[contains(@class, ' topic/topic ')]" mode="chapter-toc"/></fo:block></xsl:when></xsl:choose><xsl:apply-templates select="*[contains(@class,' topic/topic ')]"/><xsl:call-template name="pullPrologIndexTerms.end-range"/></fo:block></xsl:template><xsl:template match="*" mode="commonTopicProcessing"><xsl:variable name="topicref" select="key('map-id', ancestor-or-self::*[contains(@class, ' topic/topic ')]/@id)[1]" as="element()?"/><fo:marker marker-class-name="current-topic-number"><xsl:apply-templates select="$topicref" mode="topicTitleNumber"/></fo:marker><fo:marker marker-class-name="current-topic-title"><xsl:apply-templates select="*[contains(@class, ' topic/title ')]/node()"/></fo:marker><xsl:apply-templates select="." mode="insertTopicHeaderMarker"><xsl:with-param name="marker-class-name" select="'current-header'"/></xsl:apply-templates><fo:block><xsl:apply-templates select="*[contains(@class,' ditaot-d/ditaval-startprop ')]" mode="flag-attributes"/><xsl:apply-templates select="." mode="customTopicMarker"/><xsl:apply-templates select="*[contains(@class, ' topic/title ')]"/><xsl:apply-templates select="*[contains(@class, ' topic/prolog ')]"/><xsl:apply-templates select="* except(*[contains(@class, ' topic/title ') or contains(@class,' ditaot-d/ditaval-startprop ') or               contains(@class, ' topic/prolog ') or contains(@class, ' topic/topic ')])"/><xsl:apply-templates select="*[contains(@class,' topic/topic ')]"/><xsl:apply-templates select="." mode="topicEpilog"/></fo:block></xsl:template><xsl:template match="*[contains(@class, ' bookmap/part ')]" mode="topicTitleNumber"><xsl:sequence select="e:get-title-number(key('topic-id', @id))"/></xsl:template></xsl:stylesheet>