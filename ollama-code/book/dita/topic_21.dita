<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_21">
  <title>Appendix E: Security Checklist</title>
  <body>
    <section><title>Overview</title></section>
    <p>This appendix provides a complete security checklist for building and deploying AI coding assistants. Use this as a pre-deployment audit and ongoing security review guide.</p>
    <p><b>Security Domains:</b>
- Credential Management
- API Key Security
- Sandboxing and Isolation
- Input Validation
- Rate Limiting
- Audit Logging
- Network Security
- Data Privacy</p>
    <section><title>Pre-Deployment Security Audit</title></section>
    <section><title>‚úÖ Essential (Must Have)</title></section>
    <ul>
      <li>
        [ ]
        <b>Credential Encryption</b>
      </li>
      <li>
        [ ] All API keys encrypted at rest (AES-256-GCM)
      </li>
      <li>
        [ ] Encryption keys derived with PBKDF2 (100,000+ iterations)
      </li>
      <li>
        [ ] No hardcoded secrets in code
      </li>
      <li>
        [ ] No secrets in version control
      </li>
      <li>
        <p>[ ] No secrets in logs</p>
      </li>
      <li>
        <p>[ ] <b>Input Validation</b></p>
      </li>
      <li>
        [ ] All user inputs validated
      </li>
      <li>
        [ ] File paths sanitized
      </li>
      <li>
        [ ] Command injection prevention
      </li>
      <li>
        [ ] SQL injection prevention (if using DB)
      </li>
      <li>
        <p>[ ] XSS prevention (if web interface)</p>
      </li>
      <li>
        <p>[ ] <b>Sandboxing</b></p>
      </li>
      <li>
        [ ] Tools execute in restricted environment
      </li>
      <li>
        [ ] Filesystem access limited to allowed paths
      </li>
      <li>
        [ ] Command whitelist enforced
      </li>
      <li>
        <p>[ ] Network access controlled</p>
      </li>
      <li>
        <p>[ ] <b>Rate Limiting</b></p>
      </li>
      <li>
        [ ] Per-user rate limits configured
      </li>
      <li>
        [ ] Per-IP rate limits (if applicable)
      </li>
      <li>
        [ ] Budget limits enforced
      </li>
      <li>
        <p>[ ] Circuit breaker for failed requests</p>
      </li>
      <li>
        <p>[ ] <b>Audit Logging</b></p>
      </li>
      <li>
        [ ] All sensitive operations logged
      </li>
      <li>
        [ ] Logs include user/timestamp/action
      </li>
      <li>
        [ ] Logs stored securely
      </li>
      <li>
        [ ] Log rotation configured
      </li>
      <li>
        [ ] Anomaly detection enabled
      </li>
    </ul>
    <section><title>‚ö†Ô∏è Recommended (Should Have)</title></section>
    <ul>
      <li>
        [ ]
        <b>Authentication &amp; Authorization</b>
      </li>
      <li>
        [ ] User authentication required
      </li>
      <li>
        [ ] Role-based access control (RBAC)
      </li>
      <li>
        [ ] Session management
      </li>
      <li>
        [ ] Password policy enforced
      </li>
      <li>
        <p>[ ] MFA available</p>
      </li>
      <li>
        <p>[ ] <b>Network Security</b></p>
      </li>
      <li>
        [ ] HTTPS/TLS enforced
      </li>
      <li>
        [ ] Certificate validation
      </li>
      <li>
        [ ] Secure headers set
      </li>
      <li>
        <p>[ ] CORS configured properly</p>
      </li>
      <li>
        <p>[ ] <b>Data Privacy</b></p>
      </li>
      <li>
        [ ] PII detection and filtering
      </li>
      <li>
        [ ] Data anonymization
      </li>
      <li>
        [ ] Retention policies
      </li>
      <li>
        <p>[ ] GDPR compliance (if EU users)</p>
      </li>
      <li>
        <p>[ ] <b>Monitoring &amp; Alerting</b></p>
      </li>
      <li>
        [ ] Security events monitored
      </li>
      <li>
        [ ] Alert on suspicious activity
      </li>
      <li>
        [ ] Regular security scans
      </li>
      <li>
        [ ] Dependency vulnerability scanning
      </li>
    </ul>
    <section><title>üí° Optional (Nice to Have)</title></section>
    <ul>
      <li>
        [ ]
        <b>Advanced Protection</b>
      </li>
      <li>
        [ ] Web Application Firewall (WAF)
      </li>
      <li>
        [ ] DDoS protection
      </li>
      <li>
        [ ] Intrusion detection system (IDS)
      </li>
      <li>
        <p>[ ] Penetration testing</p>
      </li>
      <li>
        <p>[ ] <b>Compliance</b></p>
      </li>
      <li>
        [ ] SOC 2 compliance
      </li>
      <li>
        [ ] ISO 27001 certification
      </li>
      <li>
        [ ] HIPAA compliance (if health data)
      </li>
      <li>
        [ ] Regular security audits
      </li>
    </ul>
    <section><title>Credential Management</title></section>
    <section><title>API Key Storage</title></section>
    <p><b>‚ùå NEVER DO THIS:</b></p>
    <codeblock outputclass="language-typescript">// Hardcoded in code
const OPENAI_API_KEY = &apos;sk-proj-abc123...&apos;;

// In version control
git add config.json  // Contains API keys

// In logs
console.log(`Using API key: ${apiKey}`);

// In error messages
throw new Error(`Invalid API key: ${apiKey}`);
</codeblock>
    <p><b>‚úÖ DO THIS:</b></p>
    <codeblock outputclass="language-typescript">// Use environment variables
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// Or encrypted credential store
const credentialStore = new CredentialStore({
  encryption: {
    algorithm: &apos;aes-256-gcm&apos;,
    keyDerivation: &apos;pbkdf2&apos;,
    iterations: 100000
  }
});

const apiKey = await credentialStore.get(&apos;openai-api-key&apos;);
</codeblock>
    <p><b>Configuration:</b></p>
    <codeblock outputclass="language-json">{
  &quot;security&quot;: {
    &quot;credentialStore&quot;: {
      &quot;type&quot;: &quot;encrypted-file&quot;,
      &quot;path&quot;: &quot;~/.ollama-code/credentials.enc&quot;,
      &quot;encryption&quot;: {
        &quot;algorithm&quot;: &quot;aes-256-gcm&quot;,
        &quot;keyDerivation&quot;: &quot;pbkdf2&quot;,
        &quot;iterations&quot;: 100000
      }
    }
  }
}
</codeblock>
    <section><title>Environment Variables</title></section>
    <p><b>Checklist:</b>
- [ ] Use <codeph>.env</codeph> file for local development
- [ ] Add <codeph>.env</codeph> to <codeph>.gitignore</codeph>
- [ ] Use secret management in production (AWS Secrets Manager, etc.)
- [ ] Rotate keys regularly (every 90 days)
- [ ] Use separate keys for dev/staging/prod</p>
    <p><b>.env.example (committed):</b></p>
    <codeblock outputclass="language-bash">OPENAI_API_KEY=your_key_here
ANTHROPIC_API_KEY=your_key_here
</codeblock>
    <p><b>.env (NOT committed):</b></p>
    <codeblock outputclass="language-bash">OPENAI_API_KEY=sk-proj-real-key-here
ANTHROPIC_API_KEY=sk-ant-real-key-here
</codeblock>
    <p><b>.gitignore:</b></p>
    <codeblock>.env
.env.local
*.key
credentials.enc
</codeblock>
    <section><title>Sandboxing and Isolation</title></section>
    <section><title>Filesystem Restrictions</title></section>
    <p><b>Configuration:</b></p>
    <codeblock outputclass="language-json">{
  &quot;security&quot;: {
    &quot;sandbox&quot;: {
      &quot;enabled&quot;: true,
      &quot;filesystem&quot;: {
        &quot;allowedPaths&quot;: [
          &quot;~/projects&quot;,
          &quot;/tmp&quot;
        ],
        &quot;deniedPaths&quot;: [
          &quot;~/.ssh&quot;,
          &quot;~/.aws&quot;,
          &quot;~/.kube&quot;,
          &quot;/etc/passwd&quot;,
          &quot;/etc/shadow&quot;
        ],
        &quot;readOnly&quot;: [
          &quot;/usr/bin&quot;,
          &quot;/usr/lib&quot;
        ],
        &quot;maxFileSize&quot;: 10485760,
        &quot;maxTotalSize&quot;: 104857600
      }
    }
  }
}
</codeblock>
    <p><b>Checklist:</b>
- [ ] Whitelist allowed directories
- [ ] Blacklist sensitive directories
- [ ] Enforce file size limits
- [ ] Validate file paths (no <codeph>..</codeph> traversal)
- [ ] Check symlink targets</p>
    <p><b>Path Validation:</b></p>
    <codeblock outputclass="language-typescript">function validatePath(userPath: string, allowedPaths: string[]): boolean {
  // Resolve to absolute path
  const absolutePath = path.resolve(userPath);

  // Check for directory traversal
  if (absolutePath.includes(&apos;..&apos;)) {
    return false;
  }

  // Check if within allowed paths
  return allowedPaths.some(allowed =&gt; {
    const allowedAbsolute = path.resolve(allowed);
    return absolutePath.startsWith(allowedAbsolute);
  });
}
</codeblock>
    <section><title>Command Restrictions</title></section>
    <p><b>Configuration:</b></p>
    <codeblock outputclass="language-json">{
  &quot;security&quot;: {
    &quot;sandbox&quot;: {
      &quot;commands&quot;: {
        &quot;whitelist&quot;: [
          &quot;git&quot;,
          &quot;npm&quot;,
          &quot;yarn&quot;,
          &quot;node&quot;,
          &quot;python3&quot;
        ],
        &quot;blacklist&quot;: [
          &quot;rm&quot;,
          &quot;dd&quot;,
          &quot;mkfs&quot;,
          &quot;fdisk&quot;,
          &quot;shutdown&quot;,
          &quot;reboot&quot;
        ],
        &quot;allowedArgs&quot;: {
          &quot;git&quot;: [&quot;status&quot;, &quot;log&quot;, &quot;diff&quot;, &quot;add&quot;, &quot;commit&quot;],
          &quot;npm&quot;: [&quot;install&quot;, &quot;test&quot;, &quot;run&quot;]
        }
      }
    }
  }
}
</codeblock>
    <p><b>Checklist:</b>
- [ ] Whitelist safe commands only
- [ ] Blacklist destructive commands
- [ ] Validate command arguments
- [ ] Prevent command injection
- [ ] Use shell escaping</p>
    <p><b>Command Validation:</b></p>
    <codeblock outputclass="language-typescript">function validateCommand(command: string, args: string[]): boolean {
  // Check command is whitelisted
  if (!ALLOWED_COMMANDS.includes(command)) {
    return false;
  }

  // Check args are safe
  const DANGEROUS_PATTERNS = [
    /;/,           // Command chaining
    /\|/,          // Piping
    /`/,           // Command substitution
    /\$/,          // Variable expansion
    /&gt;/,           // Redirection
    /&lt;/
  ];

  return !args.some(arg =&gt;
    DANGEROUS_PATTERNS.some(pattern =&gt; pattern.test(arg))
  );
}
</codeblock>
    <section><title>Input Validation</title></section>
    <section><title>User Input Sanitization</title></section>
    <p><b>Checklist:</b>
- [ ] Validate all user inputs
- [ ] Sanitize before use
- [ ] Escape special characters
- [ ] Limit input length
- [ ] Check data types</p>
    <p><b>Implementation:</b></p>
    <codeblock outputclass="language-typescript">class InputValidator {
  // File path validation
  validateFilePath(path: string): ValidationResult {
    // Length check
    if (path.length &gt; 4096) {
      return { valid: false, error: &apos;Path too long&apos; };
    }

    // Null byte check
    if (path.includes(&apos;\0&apos;)) {
      return { valid: false, error: &apos;Invalid characters&apos; };
    }

    // Directory traversal check
    if (path.includes(&apos;..&apos;)) {
      return { valid: false, error: &apos;Directory traversal not allowed&apos; };
    }

    // Allowed characters only
    if (!/^[a-zA-Z0-9_\-./]+$/.test(path)) {
      return { valid: false, error: &apos;Invalid characters in path&apos; };
    }

    return { valid: true };
  }

  // Prompt validation
  validatePrompt(prompt: string): ValidationResult {
    // Length check
    if (prompt.length &gt; 50000) {
      return { valid: false, error: &apos;Prompt too long&apos; };
    }

    // Check for prompt injection attempts
    const INJECTION_PATTERNS = [
      /ignore.*previous.*instructions/i,
      /disregard.*system.*prompt/i,
      /you.*are.*now/i,
      /new.*role/i
    ];

    if (INJECTION_PATTERNS.some(p =&gt; p.test(prompt))) {
      return { valid: false, error: &apos;Potential prompt injection&apos; };
    }

    return { valid: true };
  }

  // API key validation
  validateApiKey(key: string): ValidationResult {
    // Format checks
    if (!/^sk-[a-zA-Z0-9]{48}$/.test(key)) {
      return { valid: false, error: &apos;Invalid API key format&apos; };
    }

    return { valid: true };
  }
}
</codeblock>
    <section><title>SQL Injection Prevention</title></section>
    <p>If using a database:</p>
    <p><b>‚ùå NEVER DO THIS:</b></p>
    <codeblock outputclass="language-typescript">// String concatenation
const query = `SELECT * FROM users WHERE id = ${userId}`;
db.query(query);
</codeblock>
    <p><b>‚úÖ DO THIS:</b></p>
    <codeblock outputclass="language-typescript">// Parameterized queries
const query = &apos;SELECT * FROM users WHERE id = ?&apos;;
db.query(query, [userId]);

// Or with ORM
User.findById(userId);
</codeblock>
    <section><title>Rate Limiting</title></section>
    <section><title>Configuration</title></section>
    <codeblock outputclass="language-json">{
  &quot;security&quot;: {
    &quot;rateLimit&quot;: {
      &quot;enabled&quot;: true,
      &quot;limits&quot;: {
        &quot;perMinute&quot;: 60,
        &quot;perHour&quot;: 1000,
        &quot;perDay&quot;: 10000
      },
      &quot;bypassTokens&quot;: [],
      &quot;actionOnExceeded&quot;: &quot;reject&quot;,
      &quot;retryAfter&quot;: 60
    }
  }
}
</codeblock>
    <p><b>Checklist:</b>
- [ ] Per-user limits
- [ ] Per-IP limits (if web-facing)
- [ ] Per-API-key limits
- [ ] Burst protection
- [ ] Graceful degradation</p>
    <p><b>Implementation:</b></p>
    <codeblock outputclass="language-typescript">class RateLimiter {
  private limits = new Map&lt;string, RateLimit&gt;();

  async checkLimit(userId: string): Promise&lt;RateLimitResult&gt; {
    const limit = this.limits.get(userId) || this.createLimit(userId);

    // Check limits
    if (limit.requestsThisMinute &gt;= 60) {
      return {
        allowed: false,
        retryAfter: 60 - (Date.now() - limit.minuteStart) / 1000,
        reason: &apos;Per-minute limit exceeded&apos;
      };
    }

    if (limit.requestsThisHour &gt;= 1000) {
      return {
        allowed: false,
        retryAfter: 3600 - (Date.now() - limit.hourStart) / 1000,
        reason: &apos;Per-hour limit exceeded&apos;
      };
    }

    // Update counters
    limit.requestsThisMinute++;
    limit.requestsThisHour++;

    return { allowed: true };
  }
}
</codeblock>
    <section><title>Audit Logging</title></section>
    <section><title>What to Log</title></section>
    <p><b>‚úÖ Log These:</b>
- Authentication attempts (success/failure)
- API key usage
- File access (read/write)
- Command execution
- Configuration changes
- Security events (rate limit, validation failure)
- Errors and exceptions</p>
    <p><b>‚ùå Never Log These:</b>
- API keys
- Passwords
- PII (unless encrypted)
- Full file contents
- Sensitive data</p>
    <p><b>Configuration:</b></p>
    <codeblock outputclass="language-json">{
  &quot;security&quot;: {
    &quot;audit&quot;: {
      &quot;enabled&quot;: true,
      &quot;events&quot;: [
        &quot;auth:login&quot;,
        &quot;auth:logout&quot;,
        &quot;auth:failed&quot;,
        &quot;api:key_used&quot;,
        &quot;file:read&quot;,
        &quot;file:write&quot;,
        &quot;command:execute&quot;,
        &quot;config:change&quot;,
        &quot;security:rate_limit&quot;,
        &quot;security:validation_failed&quot;
      ],
      &quot;storage&quot;: {
        &quot;type&quot;: &quot;file&quot;,
        &quot;path&quot;: &quot;~/.ollama-code/logs/audit.log&quot;,
        &quot;rotation&quot;: {
          &quot;maxSize&quot;: &quot;50m&quot;,
          &quot;maxFiles&quot;: 10,
          &quot;compress&quot;: true
        }
      },
      &quot;sanitization&quot;: {
        &quot;enabled&quot;: true,
        &quot;redactPatterns&quot;: [
          &quot;sk-[a-zA-Z0-9]+&quot;,
          &quot;Bearer [a-zA-Z0-9]+&quot;,
          &quot;password.*&quot;,
          &quot;api[_-]?key.*&quot;
        ]
      }
    }
  }
}
</codeblock>
    <p><b>Log Format:</b></p>
    <codeblock outputclass="language-json">{
  &quot;timestamp&quot;: &quot;2024-01-15T10:30:45.123Z&quot;,
  &quot;level&quot;: &quot;info&quot;,
  &quot;event&quot;: &quot;file:read&quot;,
  &quot;user&quot;: &quot;user@example.com&quot;,
  &quot;ip&quot;: &quot;192.168.1.100&quot;,
  &quot;action&quot;: &quot;read_file&quot;,
  &quot;resource&quot;: &quot;/home/user/project/src/index.ts&quot;,
  &quot;result&quot;: &quot;success&quot;,
  &quot;metadata&quot;: {
    &quot;fileSize&quot;: 1024,
    &quot;duration&quot;: 15
  }
}
</codeblock>
    <section><title>Network Security</title></section>
    <section><title>HTTPS/TLS</title></section>
    <p><b>Checklist:</b>
- [ ] HTTPS enforced for all connections
- [ ] Valid SSL/TLS certificates
- [ ] TLS 1.2+ only (disable older versions)
- [ ] Strong cipher suites
- [ ] HSTS header enabled</p>
    <p><b>Configuration (if serving HTTP API):</b></p>
    <codeblock outputclass="language-typescript">import https from &apos;https&apos;;
import fs from &apos;fs&apos;;

const server = https.createServer({
  key: fs.readFileSync(&apos;server.key&apos;),
  cert: fs.readFileSync(&apos;server.cert&apos;),
  // TLS 1.2+ only
  minVersion: &apos;TLSv1.2&apos;,
  // Strong ciphers only
  ciphers: [
    &apos;ECDHE-RSA-AES128-GCM-SHA256&apos;,
    &apos;ECDHE-RSA-AES256-GCM-SHA384&apos;,
    &apos;ECDHE-RSA-AES128-SHA256&apos;,
    &apos;ECDHE-RSA-AES256-SHA384&apos;
  ].join(&apos;:&apos;)
}, app);
</codeblock>
    <section><title>Security Headers</title></section>
    <p>If serving web interface:</p>
    <codeblock outputclass="language-typescript">app.use((req, res, next) =&gt; {
  // Prevent clickjacking
  res.setHeader(&apos;X-Frame-Options&apos;, &apos;DENY&apos;);

  // Prevent MIME sniffing
  res.setHeader(&apos;X-Content-Type-Options&apos;, &apos;nosniff&apos;);

  // XSS protection
  res.setHeader(&apos;X-XSS-Protection&apos;, &apos;1; mode=block&apos;);

  // HSTS
  res.setHeader(
    &apos;Strict-Transport-Security&apos;,
    &apos;max-age=31536000; includeSubDomains&apos;
  );

  // CSP
  res.setHeader(
    &apos;Content-Security-Policy&apos;,
    &quot;default-src &apos;self&apos;; script-src &apos;self&apos;; style-src &apos;self&apos; &apos;unsafe-inline&apos;&quot;
  );

  next();
});
</codeblock>
    <section><title>CORS Configuration</title></section>
    <codeblock outputclass="language-typescript">import cors from &apos;cors&apos;;

app.use(cors({
  origin: [
    &apos;https://app.yourdomain.com&apos;,
    &apos;https://staging.yourdomain.com&apos;
  ],
  credentials: true,
  methods: [&apos;GET&apos;, &apos;POST&apos;, &apos;PUT&apos;, &apos;DELETE&apos;],
  allowedHeaders: [&apos;Content-Type&apos;, &apos;Authorization&apos;]
}));
</codeblock>
    <section><title>Data Privacy</title></section>
    <section><title>PII Detection and Filtering</title></section>
    <p><b>Checklist:</b>
- [ ] Detect PII in prompts
- [ ] Detect PII in code
- [ ] Filter before sending to AI
- [ ] Anonymize in logs
- [ ] User consent for data usage</p>
    <p><b>PII Patterns:</b></p>
    <codeblock outputclass="language-typescript">const PII_PATTERNS = {
  email: /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g,
  phone: /(\+\d{1,3}[- ]?)?\d{10}/g,
  ssn: /\d{3}-\d{2}-\d{4}/g,
  creditCard: /\d{4}[- ]?\d{4}[- ]?\d{4}[- ]?\d{4}/g,
  ipAddress: /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/g,
  apiKey: /sk-[a-zA-Z0-9]{48}/g
};

class PrivacyFilter {
  filterPII(text: string): string {
    let filtered = text;

    for (const [type, pattern] of Object.entries(PII_PATTERNS)) {
      filtered = filtered.replace(pattern, `[${type.toUpperCase()}_REDACTED]`);
    }

    return filtered;
  }
}
</codeblock>
    <section><title>Data Retention</title></section>
    <p><b>Configuration:</b></p>
    <codeblock outputclass="language-json">{
  &quot;privacy&quot;: {
    &quot;retention&quot;: {
      &quot;conversations&quot;: &quot;30d&quot;,
      &quot;logs&quot;: &quot;90d&quot;,
      &quot;auditLogs&quot;: &quot;365d&quot;,
      &quot;cache&quot;: &quot;7d&quot;
    },
    &quot;deletion&quot;: {
      &quot;autoDelete&quot;: true,
      &quot;deleteOnRequest&quot;: true
    }
  }
}
</codeblock>
    <p><b>Checklist:</b>
- [ ] Define retention periods
- [ ] Auto-delete old data
- [ ] User can delete their data
- [ ] Backups encrypted
- [ ] Secure deletion (not just unlink)</p>
    <section><title>Dependency Security</title></section>
    <section><title>Vulnerability Scanning</title></section>
    <codeblock outputclass="language-bash"># npm audit
npm audit
npm audit fix

# Snyk
snyk test
snyk monitor

# OWASP Dependency Check
dependency-check --scan ./
</codeblock>
    <p><b>Checklist:</b>
- [ ] Regular dependency updates
- [ ] Automated vulnerability scanning
- [ ] No dependencies with known CVEs
- [ ] Pin dependency versions
- [ ] Review dependency licenses</p>
    <p><b>package.json:</b></p>
    <codeblock outputclass="language-json">{
  &quot;scripts&quot;: {
    &quot;audit&quot;: &quot;npm audit&quot;,
    &quot;audit:fix&quot;: &quot;npm audit fix&quot;,
    &quot;snyk&quot;: &quot;snyk test&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;snyk&quot;: &quot;^1.1000.0&quot;
  }
}
</codeblock>
    <section><title>Incident Response Plan</title></section>
    <section><title>Security Incident Checklist</title></section>
    <p><b>Immediate Actions:</b>
1. [ ] Identify the incident type
2. [ ] Assess impact and scope
3. [ ] Contain the incident
4. [ ] Preserve evidence (logs, etc.)
5. [ ] Notify stakeholders</p>
    <p><b>Short-term Actions:</b>
6. [ ] Rotate compromised credentials
7. [ ] Patch vulnerabilities
8. [ ] Block malicious IPs
9. [ ] Review audit logs
10. [ ] Update security rules</p>
    <p><b>Long-term Actions:</b>
11. [ ] Conduct post-mortem
12. [ ] Update security policies
13. [ ] Improve monitoring
14. [ ] Train team
15. [ ] Test incident response</p>
    <p><b>Contact Information:</b></p>
    <codeblock>Security Team: security@yourdomain.com
On-Call: +1-xxx-xxx-xxxx
Escalation: ceo@yourdomain.com
</codeblock>
    <section><title>Security Testing</title></section>
    <section><title>Penetration Testing Checklist</title></section>
    <p><b>Before Production:</b>
- [ ] Input validation testing
- [ ] Authentication testing
- [ ] Authorization testing
- [ ] Session management testing
- [ ] Injection testing (SQL, command, etc.)
- [ ] API security testing
- [ ] File upload testing
- [ ] Rate limiting testing</p>
    <p><b>Tools:</b></p>
    <codeblock outputclass="language-bash"># OWASP ZAP
zap-cli quick-scan http://localhost:3000

# Burp Suite
# Manual testing

# SQLMap (if using database)
sqlmap -u &quot;http://localhost:3000/api/user?id=1&quot;

# Nikto
nikto -h http://localhost:3000
</codeblock>
    <section><title>Compliance Checklists</title></section>
    <section><title>GDPR Compliance (EU Users)</title></section>
    <ul>
      <li>
        [ ] Privacy policy published
      </li>
      <li>
        [ ] Cookie consent
      </li>
      <li>
        [ ] Data collection minimized
      </li>
      <li>
        [ ] User consent obtained
      </li>
      <li>
        [ ] Right to access data
      </li>
      <li>
        [ ] Right to delete data
      </li>
      <li>
        [ ] Data portability
      </li>
      <li>
        [ ] Data breach notification process
      </li>
      <li>
        [ ] DPO appointed (if required)
      </li>
      <li>
        [ ] DPIA completed (if required)
      </li>
    </ul>
    <section><title>SOC 2 Compliance</title></section>
    <ul>
      <li>
        [ ] Access controls
      </li>
      <li>
        [ ] Change management
      </li>
      <li>
        [ ] Risk assessment
      </li>
      <li>
        [ ] Vendor management
      </li>
      <li>
        [ ] Business continuity plan
      </li>
      <li>
        [ ] Incident response plan
      </li>
      <li>
        [ ] Monitoring and logging
      </li>
      <li>
        [ ] Regular audits
      </li>
    </ul>
    <section><title>Security Review Frequency</title></section>
    <section><title>Daily</title></section>
    <ul>
      <li>
        [ ] Review audit logs
      </li>
      <li>
        [ ] Check for failed auth attempts
      </li>
      <li>
        [ ] Monitor error rates
      </li>
    </ul>
    <section><title>Weekly</title></section>
    <ul>
      <li>
        [ ] Review security alerts
      </li>
      <li>
        [ ] Check dependency vulnerabilities
      </li>
      <li>
        [ ] Review access logs
      </li>
    </ul>
    <section><title>Monthly</title></section>
    <ul>
      <li>
        [ ] Rotate API keys
      </li>
      <li>
        [ ] Review user permissions
      </li>
      <li>
        [ ] Update dependencies
      </li>
      <li>
        [ ] Test backups
      </li>
    </ul>
    <section><title>Quarterly</title></section>
    <ul>
      <li>
        [ ] Security audit
      </li>
      <li>
        [ ] Penetration testing
      </li>
      <li>
        [ ] Policy review
      </li>
      <li>
        [ ] Team training
      </li>
    </ul>
    <section><title>Annually</title></section>
    <ul>
      <li>
        [ ] Comprehensive security audit
      </li>
      <li>
        [ ] Compliance certification
      </li>
      <li>
        [ ] Incident response drill
      </li>
      <li>
        [ ] Security roadmap review
      </li>
    </ul>
    <section><title>Security Score Card</title></section>
    <p>Rate your implementation (0-5 for each):</p>
    <table>
      <tgroup cols="3">
        <colspec colname="c1" colnum="1"/>
        <colspec colname="c2" colnum="2"/>
        <colspec colname="c3" colnum="3"/>
        <thead>
          <row>
            <entry>Category</entry>
            <entry>Score</entry>
            <entry>Notes</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>Credential Management</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Input Validation</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Sandboxing</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Rate Limiting</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Audit Logging</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Network Security</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Data Privacy</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Dependency Security</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Incident Response</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
          <row>
            <entry>Compliance</entry>
            <entry>/5</entry>
            <entry></entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <p><b>Total: __ / 50</b></p>
    <p><b>Grade:</b>
- 45-50: Excellent
- 40-44: Good
- 35-39: Acceptable
- 30-34: Needs Improvement
- &lt; 30: Critical Issues</p>
    <p><i>Appendix E | Security Checklist | 8-12 pages</i></p>
  </body>
</topic>